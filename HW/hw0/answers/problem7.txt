Chun-Wei Chen
CSE 331
04/02/13

a. In the constructor, it assign the formal parameter (volume) to the formal parameter itself instead of assigning the formal parameter passed in to the instance variable. I changed the statement in the constructor into "this.volume = volume;" to fix it. Another problem is that the instance variable volume is never used and the getVolume returns 0 instead of returning the value stored in the instance variable; therefore, I changed the return statement in getVolume method into "return volume;"
b. Keeping track of the total volume of the Balls in BallContainer is better since the program doesn't need to go through every element in the BallContainer in order to get the total volume. For instance, if the BallContainer contains 100000 balls, keeping track of the total volume can return the volume instantly when calling getVolume while the other approach needs to go through all the 100000 balls in the BallContainer to get the answer.
c. 
	1. I used TreeSet with additional comparator for ball to implement getBallsFromSmallest since TreeSet in Java library has iterator method that returns an iterator over the elements in this set in ascending order based on the comparator provided to the TreeSet. Another way I come up with is to use a TreeSet as an instance variable to hold the balls along with the BallContainer; in other words, add method adds a ball into both BallContainer and TreeSet, remove method removes a ball from both BallContainer and TreeSet, and clear method removes all the balls from both BallContainer and TreeSet. This approach allows getBallsFromSmallest to return an iterator directly instead of add all the balls into a TreeSet and then return the iterator. 
	2. getBallsFromSmallest is probably not called as often as other method that modifies the BallContainer and using another collection to hold balls cost space twice as only using BallContainer to store balls; therefore, I think the first approach I mentioned above is better.